#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"

# shellcheck disable=SC2034
_global_variables() {
  run_date=""
  target_namespace=""
  target_command=""
  target_key=""
  target_value=""
  cache_dir=""
  http="https://github.com"
  mirror_description=(
    "Ur uncensorable DogeOS"
    "and Life user repository"
    "and app store package HTTP mirror."
  )
  mirror_homepage="${http}/themartiancompany/ur"
  mirror_topics=(
    "ur"
    "ur-app-store"
    "universal-recipe"
    "user-repo"
    "dogeos-package"
    "life-package"
  )
  mirror_fields=(
    "description"
    "homepage"
    "topics"
    "project_id"
    "artifacts"
    "log"
    "releases"
    "release"
  )
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "curl"
  _check_cmd \
    'gh'
  _check_cmd \
    'python'
  _check_cmd \
    'jq'
  _check_cmd \
    "unzip"
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/gur"
  echo \
    "${_dir}"
}

_repos_get() {
  local \
    _namespace="${1}" \
    _repos_urls=() \
    _url \
    _repo \
    _repos_get_bin \
    _lib \
    _msg=()
  _lib="$( \
    _get_lib)"
  _repos_get_bin="${_lib}/gur/repos-get"
  _msg=(
    "Retrieving list of"
    "Ur mirrors for"
    "'${_namespace}' namespace"
    "from Github."
  )
  _msg_info \
    "${_msg[*]}"
  _repos_urls=( $( \
    "${_repos_get_bin}" \
      "${_namespace}")
  )
  for _url in "${_repos_urls[@]}"; do
    _repo="$( \
      basename \
        "${_url}")"
    if [[ "${_repo}" == *"-ur" ]]; then
      _repos+=(
        "${_repo}"
      )
    fi
  done
  _msg=(
    "Found '${#_repos[@]}'"
    "Ur applications"
    "HTTP mirrors."
  )
  _msg_info \
    "${_msg[*]}"
  _msg=(
    "Saving list locally"
    "because Github API limit"
    "is ridiculous for a company"
    "which gives people free computers"
    "to build stuff."
  )
  _msg_info \
    "${_msg[*]}"
  printf \
    '%s\n' \
    "${_repos[@]}" > \
    "${_cache_dir}/mirrors.db"
}

_description_get() {
  local \
    _target_namespace="${1}" \
    _target_repo="${2}" \
    _description
  _description="$( \
    gh \
      repo \
      view \
      "${http}/${_target_namespace}/${_target_repo}" \
      --json \
        "description" \
      --jq \
        ".description")"
  echo \
    "${_description}"
}

_homepage_get() {
  local \
    _target_namespace="${1}" \
    _target_repo="${2}" \
    _homepage
  _homepage="$( \
    gh \
      repo \
      view \
      "${http}/${_target_namespace}/${_target_repo}" \
      --json \
        "homepageUrl" \
      --jq \
        ".homepageUrl")"
  echo \
    "${_homepage}"
}

_topics_get() {
  local \
    _target_namespace="${1}" \
    _target_repo="${2}" \
    _topics
  _topics=( $( \
    gh \
      repo \
      view \
      "${http}/${_target_namespace}/${_target_repo}" \
      --json \
        "repositoryTopics" \
      --jq \
        ".repositoryTopics.[].name" 2>/dev/null)
  )
  echo \
    "${_topics[@]}"
}

_description_set() {
  local \
    _target_namespace="${1}" \
    _target_repo="${2}" \
    _description="${3}"
  gh \
    repo \
    edit \
    "${_target_namespace}/${_target_repo}" \
    -d \
      "${_description}"
}

_homepage_set() {
  local \
    _target_namespace="${1}" \
    _target_repo="${2}" \
    _homepage="${3}"
  gh \
    repo \
    edit \
    "${_target_namespace}/${_target_repo}" \
    -h \
      "${_homepage}"
}

_topic_set() {
  local \
    _target_namespace="${1}" \
    _target_repo="${2}" \
    _topic="${3}"
  gh \
    repo \
    edit \
    "${_target_namespace}/${_target_repo}" \
    --add-topic \
      "${_topic}"
}

_description_check() {
  local \
    _target_namespace="${1}" \
    _target_repo="${2}" \
    _description \
    _msg=()
  _msg=(
    "Checking"
    "'${_target_namespace}/${_target_repo}'"
    "description."
  )
  _msg_info \
    "${_msg[*]}"
  _description="$( \
    _description_get \
      "${_target_namespace}" \
      "${_target_repo}")"
  if [[ "${_description}" != "${mirror_description[*]}" ]]; then
    _description_set \
      "${_target_namespace}" \
      "${_target_repo}" \
      "${mirror_description[*]}"
  fi
}


_homepage_check() {
  local \
    _target_namespace="${1}" \
    _target_repo="${2}" \
    _homepage
  _msg=(
    "Checking"
    "'${_target_namespace}/${_target_repo}'"
    "homepage."
  )
  _msg_info \
    "${_msg[*]}"
  _homepage="$( \
    _homepage_get \
      "${_target_namespace}" \
      "${_target_repo}")"
  if [[ "${_homepage}" != "${mirror_homepage}" ]]; then
    _homepage_set \
      "${_target_namespace}" \
      "${_target_repo}" \
      "${mirror_homepage}"
  fi
}

_topics_check() {
  local \
    _target_namespace="${1}" \
    _target_repo="${2}" \
    _topics=() \
    _target_topics=()
  _msg=(
    "Checking"
    "'${_target_namespace}/${_target_repo}'"
    "topics."
  )
  _msg_info \
    "${_msg[*]}"
  _topics=( $( \
    _topics_get \
      "${_target_namespace}" \
      "${_target_repo}")
  )
  if [[ "${_topics[*]}" == "" ]]; then
    _msg=(
      "Found no topics on"
      "mirror '${_target_repo}'."
    )
    _msg_info \
      "${_msg[*]}"
  fi
  for _topic in "${mirror_topics[@]}"; do
    if [[  " ${_topics[*]} " != *" ${_topic} "* ]]; then
      _msg=(
        "Missing '${_topic}'."
      )
      _msg_info \
        "${_msg[*]}"
      _topic_set \
        "${_target_namespace}" \
        "${_target_repo}" \
        "${_topic}"
    fi
  done
}

_project_id_get() {
  local \
    _namespace="${1}" \
    _repo="${2}" \
    _curl_opts=() \
    _token_private \
    _token
  _token_private_get
  _token="PRIVATE-TOKEN: $( \
    cat \
      "${_token_private}")"
  _curl_opts+=(
    --silent
    -XGET
    --header
      "${_token}"
  )
  curl \
    "${_curl_opts[@]}" \
    "https://gitlab.com/api/v4/projects/${_namespace}%2F${_repo}-ur" | \
    jq \
      '.id'
}

_artifacts_get() {
  local \
    _namespace="${1}" \
    _repo="${2}" \
    _project_id \
    _gl_dl_opts=() \
    _api \
    _url \
    _job_latest \
    _old_pwd \
    _token_private
  _token_private_get
  if [[ "${quiet}" == "n" ]]; then
    _gl_dl_opts+=(
      -v
    )
  fi
  _project_id="$( \
    _project_id_get \
      "${_namespace}" \
      "${_repo}")"
  _job_latest_get \
    "${_project_id}"
  _msg_info \
    "Found job id '${_job_latest}'."
  _api="https://gitlab.com/api/v4"
  _url="${_api}/projects/${_project_id}/jobs/${_job_latest}/artifacts"
  _gl_dl_opts+=(
    -o
      "${_cache_dir}/artifacts.zip"
    -f
      "zip"
    -C
      "${_token_private}"
  )
  gl-dl \
    "${_gl_dl_opts[@]}" \
    "${_url}"
  mkdir \
    -p \
    "${_cache_dir}/artifacts"
  _old_pwd=${PWD}
  cd \
    "${_cache_dir}/artifacts"
  unzip \
    -qq \
    "${_cache_dir}/artifacts.zip"
  rm \
    "${_cache_dir}/artifacts.zip"
  for _artifact \
    in "./"*; do
    echo \
      "$(basename \
           "${_artifact}")"
    mv \
      "${_artifact}" \
      "${_old_pwd}"
  done
  cd \
    "${_old_pwd}"
  rmdir \
    "${_cache_dir}/artifacts"
}

_pipeline_latest_get() {
  local \
    _project_id="${1}" \
    _pipelines=()
  _pipelines_get \
    "${_project_id}"
}

_job_latest_get() {
  local \
    _project_id="${1}" \
    _jobs=()
  _jobs_get \
    "${_project_id}"
  _job_latest="$( \
    IFS=$'\n'
    echo \
      "${_jobs[*]}" | \
      sort \
        -nr | \
          head \
            -n \
              1)"
  # _job_latest="${_jobs[0]}"
}

_token_private_get() {
  local \
    _token_dir \
    _token_namespace \
    _msg=()
  _token_dir="${HOME}/.config/gitlab.com"
  _token_private="${_token_dir}/default.txt"
  _token_namespace="${_token_dir}/${_namespace}.txt"
  if [[ -e "${_token_namespace}" ]]; then
    _token_private="${_token_namespace}"
    _msg=(
      "Selecting namespace token."
    )
    _msg_info \
      "${_msg[*]}"
  fi
  if [[ ! -e "${_token_private}" ]]; then
    mkdir \
      -p \
      "${_token_dir}"
    chmod \
      700 \
      "${_token_dir}"
    _msg=(
      "Missing private token at"
      "'${_token_private}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_pipelines_get() {
  local \
    _project_id="${1}" \
    _gl_dl_opts=() \
    _msg=() \
    _token_private
  _token_private_get
  if [[ "${quiet}" == "n" ]]; then
    gl_dl_opts+=(
      -v
    )
  fi
  _gl_dl_opts+=(
    -o
      "${_cache_dir}/pipelines.json" 
    -C
      "${_token_private}"
  )
  gl-dl \
    "${_gl_dl_opts[@]}" \
    "https://gitlab.com/api/v4/projects/${_project_id}/pipelines?per_page=20&sort=desc"
  _jobs+=( $( \
    cat \
      "${_cache_dir}/pipelines.json" | \
      jq \
        '.[]' | \
        jq \
          '.id')
  )
  _msg=(
    "Found '${#_jobs}'"
    "job for project '${_project_id}'."
  )
  _msg_info \
    "${_msg[*]}"
  rm \
    "${_cache_dir}/jobs.json"
}

_release_get() {
  local \
    _namespace="${1}" \
    _repo="${2}" \
    _project_id \
    _gl_dl_opts=() \
    _api \
    _url \
    _job_latest \
    _output_file \
    _token_private
  _token_private_get
  if [[ "${quiet}" == "n" ]]; then
    _gl_dl_opts+=(
      -v
    )
  fi
  _gl_dl_opts+=(
    -C
      "${_token_private}"
  )
  _releases_retrieve \
    "${_namespace}" \
    "${_repo}"
  _urls=( $( \
    cat \
      "${_cache_dir}/releases.json" | \
      jq \
        '.[0].assets.links.[]' | \
        jq \
          --raw-output \
          '.direct_asset_url')
  )
  for _url in "${_urls[@]}"; do
    _file="$( \
      basename \
        "${_url}")"
    _output_file="$(pwd)/${_file}"
    gl-dl \
      "${_gl_dl_opts[@]}" \
      -o \
        "${_output_file}" \
      "${_url}"
  done
}

_releases_get() {
    _namespace="${1}" \
    _repo="${2}"
  _releases_retrieve \
    "${_namespace}" \
    "${_repo}"
  cat \
    "${_cache_dir}/releases.json" | \
  jq
}

_releases_retrieve() {
  local \
    _namespace="${1}" \
    _repo="${2}" \
    _project_id \
    _gl_dl_opts=() \
    _api \
    _url \
    _token_private
  _token_private_get
  if [[ "${quiet}" == "n" ]]; then
    _gl_dl_opts+=(
      -v
    )
  fi
  _project_id="$( \
    _project_id_get \
      "${_namespace}" \
      "${_repo}")"
  _api="https://gitlab.com/api/v4"
  _url="${_api}/projects/${_project_id}/releases"
  _gl_dl_opts+=(
    -C
      "${_token_private}"
    -o
      "${_cache_dir}/releases.json"
  )
  gl-dl \
    "${_gl_dl_opts[@]}" \
    "${_url}"
}

_log_get() {
  local \
    _namespace="${1}" \
    _repo="${2}" \
    _project_id \
    _msg=()
  _project_id="$( \
    _project_id_get \
      "${_namespace}" \
      "${_repo}")"
  _job_latest_get \
    "${_project_id}"
  _msg=(
    "Found job id '${_job_latest}'."
  )
  _msg_info \
    "${_msg[*]}"
  _gitlab_log_get \
    "${_namespace}" \
    "${_repo}" \
    "${_job_latest}"
}

_gitlab_log_get() {
  local \
    _namespace="${1}" \
    _repo="${2}" \
    _job_id="${3}" \
    _project_id \
    _gl_dl_opts=() \
    _api \
    _url \
    _token_private
  _token_private_get
  if [[ "${quiet}" == "n" ]]; then
    _gl_dl_opts+=(
      -v
    )
  fi
  _project_id="$( \
    _project_id_get \
      "${_namespace}" \
      "${_repo}")"
  _api="https://gitlab.com/api/v4"
  _url="${_api}/projects/${_project_id}/jobs/${_job_id}/trace"
  _gl_dl_opts+=(
    -C
      "${_token_private}"
    -o
      "${_cache_dir}/trace.log"
  )
  gl-dl \
    "${_gl_dl_opts[@]}" \
    "${_url}"
  cat \
    "${_cache_dir}/trace.log"
}

_jobs_get() {
  local \
    _project_id="${1}" \
    _gl_dl_opts=() \
    _msg=() \
    _token_private
  _token_private_get
  if [[ "${quiet}" == "n" ]]; then
    _gl_dl_opts+=(
      -v
    )
  fi
  _gl_dl_opts+=(
    -C
      "${_token_private}"
    -o
      "${_cache_dir}/jobs.json" 
  )
  gl-dl \
    "${_gl_dl_opts[@]}" \
    "https://gitlab.com/api/v4/projects/${_project_id}/jobs?per_page=20"
  _jobs+=( $( \
    cat \
      "${_cache_dir}/jobs.json" | \
      jq \
        '.[]' | \
        jq \
          '.id')
  )
  _msg=(
    "Found '${#_jobs}'"
    "job for project '${_project_id}'."
  )
  _msg_info \
    "${_msg[*]}"
  rm \
    "${_cache_dir}/jobs.json"
}

_gur() {
  local \
    _target_namespace="${1}" \
    _cache_dir="${2}" \
    _target_command="${3}" \
    _target_key="${4}" \
    _target_value="${5}" \
    _repos=() \
    _target_field \
    _target_repo
  shift \
    5
  if [[ "${_target_command}" == "get" ]]; then
    if [[ " ${_target_key} " == "" ]]; then
      _msg_error \
        "A field must be provided." \
        1
    fi
    if [[ "${_target_key}" == "repos" ]]; then
      _repos_get \
        "${_target_namespace}"
      echo \
        "${_repos[@]}"
    elif [[ " ${_target_value} " == "" ]]; then
      _msg_error \
        "A repository must be provided." \
        1
    fi
    if [[ "${_target_key}" != "repos" ]]; then
      if [[ " ${mirror_fields[*]} " == *" ${_target_key} "* ]]; then
        _target_field="${_target_key}"
        _target_repo="${_target_value}"
        "_${_target_field}_get" \
          "${_target_namespace}" \
          "${_target_repo}"
      else
        _msg_error \
          "Unknown field '${_target_key}'." \
          1
      fi
    fi
  elif [[ "${_target_command}" == "check" ]]; then
    if [[ "${_target_value}" != "" ]]; then
      _target_repo="${_target_value}-ur"
      _repos+=(
        "${_target_repo}"
      )
    elif [[ "${_target_value}" == "" ]]; then
      _msg=(
        "No repository selected, global check"
        "triggered."
      )
      _msg_info \
        "${_msg[*]}"
      if [[ ! -e "${_cache_dir}/mirrors.db" ]]; then
        _repos_get \
          "${_target_namespace}"
      elif [[ -e "${_cache_dir}/mirrors.db" ]]; then
        _msg=(
          "Using local mirrors list"
          "because Github has a miserable"
          "API limit."
        )
        _msg_info \
          "${_msg[*]}"
        _repos+=( $( \
          cat \
            "${_cache_dir}/mirrors.db")
        )
      fi
    fi
    if [[ "${_target_key}" == "" ]]; then
      _msg=(
        "No field selected, checking all."
      )
      _msg_info \
        "${_msg[*]}"
      for _target_repo in "${_repos[@]}"; do
        _checked="$( \
          cat \
            "${_cache_dir}/checked.db" | \
            grep \
              "${_target_repo}" || \
            true)"
        if [[ "${_checked}" == "" ]]; then
          _msg=(
            "Mirror for package"
            "'${_target_repo}'"
            "unchecked, checking now."
          )
          _msg_info \
            "${_msg[*]}"
          for _field in "${mirror_fields[@]}"; do
            "_${_field}_check" \
              "${_target_namespace}" \
              "${_target_repo}"
          done
          echo \
            "${_target_repo}" >> \
            "${_cache_dir}/checked.db"
        elif [[ "${_checked}" != "" ]]; then
          _msg=(
            "Mirror for package"
            "'${_target_repo}'"
            "already checked, skipping."
          )
          _msg_info \
            "${_msg[*]}"
        fi
      done
    elif [[ " ${mirror_fields[*]} " == *" ${_target_key} "* ]]; then
      _target_field="${_target_key}"
      for _target_repo in "${_repos[@]}"; do
        "_${_target_field}_check" \
          "${_target_namespace}" \
          "${_target_repo}"
      done
    else
      _msg_error \
        "Unknown field '${_target_key}'." \
        1
    fi
  fi
}

_cache_dir_auto_detect() {
  local \
    _cache_dir
  _cache_dir="${HOME}/.cache/gur"
  if [[ ! -e "${_cache_dir}" ]]; then
    mkdir \
      -p \
      "${_cache_dir}"
    chmod \
      700 \
      "${_cache_dir}"
  fi
  _set_override \
    "cache" \
    "dir" \
    "${HOME}/.cache/gur"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "run" \
    "date" \
    "$(_get_date_human)"
  _cache_dir_auto_detect
  _set_override \
    "target" \
    "namespace" \
    "themartiancompany"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Ur Github/Gitlab HTTP mirrors management tool

Usage:
  ${app_name}
    [options]
    <command>
      <key>
        <value>

  commands:
    get                     Reads the value for the
      <key>                 selected key.
        (<package>)
    check                   Checks whether the selected
      <key>                 key (or all if none) has been
        (<package>)         correctly set for package mirror.

  keys:
    repos                   List all Ur repos in the
                            target namespace.
    description             Description of mirror repository.
    homepage                Homepage of a mirror repository.
    topics                  Topics of a mirror repository.
    project_id              Project ID for a Gitlab repository.
    artifacts               Latest artifact for an Ur Gitlab mirror.
    log                     Latest log for an Ur Gitlab mirror.
    releases                Get releases for an Ur Gitlab mirror.
    release                 Downloads latest release assets for
                            an Ur Gitlab mirror.

  values:
    package_name            An Ur package name (mirrors
                            have same name with just the
                            extra '-ur' suffix).

  options:
     -N <namespace>         Target namespace for the Ur
                            repositories.
                            Default: ${target_namespace}
     -W <cache_dir>         Location where to temporary store
                            the downloaded resource chunks.
                            Default: ${cache_dir}

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                       Run date:   ${run_date}"
  _msg_info "               Target namespace:   ${target_namespace}"
  _msg_info "                Cache directory:   ${cache_dir}"
  _msg_info "                 Target command:   ${target_command}"
  _msg_info "                     Target key:   ${target_key}"
  _msg_info "                   Target value:   ${target_value}"
}

_globals
_global_variables
_requirements
_config_user_init \
  "${app_name}"
# shellcheck disable=SC2034
while \
  getopts \
    'N:W:cvh?' \
    arg; do
  case \
    "${arg}" in
    N) override_target_namespace="${OPTARG}" ;;
    W) override_cache_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "No command given." \
    0
  _set_overrides
  _usage \
    1
fi
target_command="${1}"
if (( 1 < $# )); then
  target_key="${2}"
fi
if (( 2 < $# )); then
  target_value="${3}"
fi
_set_overrides
_show_config
app_opts=(
  "${target_namespace}"
  "${cache_dir}"
  "${target_command}"
  "${target_key}"
  "${target_value}"
)
_gur \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
