#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"

# shellcheck disable=SC2034
_global_variables() {
  run_date=""
  target_namespace=""
  target_command=""
  target_key=""
  target_value=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'gh'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/gur"
  echo \
    "${_dir}"
}

_repos_list() {
  local \
    _namespace="${1}"
  gh \
    api \
    "users/:${_namespace}/repos"
}

_gur() {
  local \
    _target_command="${1}" \
    _target_key="${2}" \
    _target_value="${3}" \
    _namespace="${4}"
  shift \
    4
  if [[ "${_target_command}" == "list" ]]; then
    if [[ "${_target_key}" == "repos" ]]; then
    fi
  fi
}

_cache_dir_auto_detect() {
  local \
    _cache_dir
  _cache_dir="${HOME}/.cache/gur"
  if [[ ! -e "${_cache_dir}" ]]; then
    mkdir \
      -p \
      "${_cache_dir}"
    chmod \
      700 \
      "${_cache_dir}"
  fi
  _set_override \
    "cache" \
    "dir" \
    "${HOME}/.cache/gur"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "run" \
    "date" \
    "$(_get_date_human)"
  _cache_dir_auto_detect
  _set_override \
    "target" \
    "namespace" \
    "themartiancompany"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Ur Github HTTP mirrors management tool

Usage:
  ${app_name}
    [options]
    <command>
      <key>
        <value>

  commands:
    list
      <value>

  keys:
    repos                   List all Ur repos in the
                            target namespace.


  options:
     -N <namespace>         Target namespace for the Ur
                            repositories.
                            Default: ${target_namespace}
     -W <cache_dir>         Location where to temporary store
                            the downloaded resource chunks.
                            Default: ${cache_dir}

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                       Run date:   ${run_date}"
  _msg_info "               Target namespace:   ${target_namespace}"
  _msg_info "                Cache directory:   ${cache_dir}"
  _msg_info "                 Target command:   ${target_command}"
  _msg_info "                     Target key:   ${target_key}"
  _msg_info "                   Target value:   ${target_value}"
}

_globals
_global_variables
_requirements
_config_user_init \
  "${app_name}"
# shellcheck disable=SC2034
while \
  getopts \
    'N:W:cvh?' \
    arg; do
  case \
    "${arg}" in
    N) override_target_namespace="${OPTARG}" ;;
    W) override_cache_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "No command given." \
    0
  _set_overrides
  _usage \
    1
fi
if (( $# < 2 )); then
  _msg_error \
    "No key given." \
    0
  _set_overrides
  _usage \
    1
fi
target_command="${1}"
target_key="${2}"
target_value="${3}"

_set_overrides
_show_config
app_opts=(
  "${target_command}"
  "${target_key}"
  "${target_value}"
)
_gur \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
